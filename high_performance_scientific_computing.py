# -*- coding: utf-8 -*-
"""High-Performance Scientific Computing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-SM9_UxVfoh9OJyNe2iWymSDlETu5Mz
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import io
df2 = pd.read_csv(io.BytesIO(uploaded['data5_2.csv']))
# Dataset is now stored in a Pandas Dataframe

print(df2.columns)

ax =df2.plot(x ='dimension', y='bandwidth', kind='line')
# Set the y-axis label
ax.set_title('Write Measurements')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# create a dataframe with the data
df2 = pd.DataFrame({
    'dimension': [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384],
    'bandwidth': [6.00E+06, 4.60E+07, 9.00E+07, 1.27E+08, 3.92E+08, 2.12E+08, 7.79E+08, 9.43E+08, 9.15E+08, 4.77E+08]
})

# plot the data
ax = df2.plot(x='dimension', y='bandwidth', kind='line', marker='o', linestyle='-')
ax.set_title('Read Measurements')

# set the x-axis and y-axis labels
ax.set_xlabel('Dimension')
ax.set_ylabel('Bandwidth (bytes/second)')

plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# create a dataframe with the data
df2 = pd.DataFrame({
    'Message Size': [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728],
    'Bandwidth': [1.299479e+05, 4.283855e+06, 1.430210e+07, 4.531175e+07, 2.735315e+06, 1.461845e+07, 4.031650e+07, 7.003300e+07, 1.258027e+07, 9.621050e+07, 1.939080e+08, 2.977335e+07, 2.851375e+08, 3.461305e+08, 5.065175e+08, 6.151960e+08, 7.041975e+08, 7.756000e+08, 9.685350e+08, 1.038265e+09, 1.162530e+09, 1.282615e+09, 1.404525e+09, 1.332935e+09, 1.529765e+09]
})

# plot the data
ax = df2.plot(x='Message Size', y='Bandwidth', kind='line', marker='o', linestyle='-')
ax.set_title('Read Measurements')

# set the x-axis and y-axis labels
ax.set_xlabel('Message Size')
ax.set_ylabel('Bandwidth (bytes/second)')

plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# create a dataframe with the data
df = pd.DataFrame({
    'thread count': [1, 2, 3, 4, 5, 6],
    'time': [8.84244, 5.6853, 3.66549, 2.98991, 2.71548, 2.98422]
})

# plot the data
ax = df.plot(x='thread count', y='time', kind='line', marker='o', linestyle='-')
ax.set_title('Strong Scaling Efficiency')

# set the x-axis and y-axis labels
ax.set_xlabel('Thread Count')
ax.set_ylabel('Time (second)')

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# create a dataframe with the data
df = pd.DataFrame({
    'partition_points': [10, 100, 1000, 10000, 100000, 1000000],
    'thread_count_6.1667': [0.0843827, 0.0102147, 0.00104017, 0.000104677, 1.09472e-05, 1.57244e-06]
})

# keep only the column for thread count = 6.1667
df = df[['partition_points', 'thread_count_6.1667']]

# Take the logarithm of y-values
df['log_thread_count_6.1667'] = np.log(df['thread_count_6.1667'])

# print the updated dataframe
print(df)

# plot the data
ax = df.plot(x='partition_points', y='thread_count_6.1667', kind='line', marker='o', linestyle='-')
ax.set_title('Numerical Error')

# set the x-axis and y-axis labels
ax.set_xlabel('partition_points')
ax.set_ylabel('Log(Error)')

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# create a dataframe with the data
df = pd.DataFrame({
    'partition_points': [10, 100, 1000, 10000, 100000, 1000000],
    'thread_count_6.1667': [0.0843827, 0.0102147, 0.00104017, 0.000104677, 1.09472e-05, 1.57244e-06]
})

# keep only the column for thread count = 6.1667
df = df[['partition_points', 'thread_count_6.1667']]

# Take the logarithm of y-values
df['log_thread_count_6.1667'] = np.log(df['thread_count_6.1667'])

# print the updated dataframe
print(df)

# plot the data
ax = df.plot(x='partition_points', y='log_thread_count_6.1667', kind='line', marker='o', linestyle='-')
ax.set_title('Numerical Error')

# set the x-axis and y-axis labels
ax.set_xlabel('partition_points')
ax.set_ylabel('Log(Error)')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# create a dataframe with the data
df = pd.DataFrame({
    'x': range(1, 41),
    'y': [8.36E-05, 0.000128073, 0.000131249, 0.000148843, 0.000112508, 0.000634257, 0.00144773, 0.00055307, 0.11073,
          0.074829, 0.0124364, 0.000913127, 0.0124992, 0.0897161, 0.0201167, 0.00619489, 0.00986959, 0.0151015,
          0.0246232, 0.0557055, 0.0280536, 0.0331662, 0.0258373, 0.0771276, 0.124336, 0.0328715, 0.120993,
          0.0722865, 0.117387, 0.0346272, 0.0209631, 0.186988, 0.00163661, 0.127092, 0.0246603, 0.0211354,
          0.0230621, 0.0368712, 0.0260314, 0.013147]
})

# plot the data
ax = df.plot(x='x', y='y', kind='line', marker='o', linestyle='-')
ax.set_title('Strong Scaling Efficiency')

# set the x-axis and y-axis labels
ax.set_xlabel('Process Count')
ax.set_ylabel('Time')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# create a dataframe with the data
df = pd.DataFrame({
    'x': range(1, 41),
    'y': [8.36E-05, 0.000128073, 0.000131249, 0.000148843, 0.000112508, 0.000634257, 0.00144773, 0.00055307, 0.11073,
          0.074829, 0.0124364, 0.000913127, 0.0124992, 0.0897161, 0.0201167, 0.00619489, 0.00986959, 0.0151015,
          0.0246232, 0.0557055, 0.0280536, 0.0331662, 0.0258373, 0.0771276, 0.124336, 0.0328715, 0.120993,
          0.0722865, 0.117387, 0.0346272, 0.0209631, 0.186988, 0.00163661, 0.127092, 0.0246603, 0.0211354,
          0.0230621, 0.0368712, 0.0260314, 0.013147]
})

# take the logarithm of the y values
df['y_log'] = np.log(df['y'])

# plot the data
ax = df.plot(x='x', y='y_log', kind='line', marker='o', linestyle='-')
ax.set_title('Strong Scaling Efficiency')

# set the x-axis and y-axis labels
ax.set_xlabel('Process Count')
ax.set_ylabel('Log(Time)')

# set the y-axis ticks to be the logarithm of the original values
yticks = np.logspace(np.log10(df['y'].min()), np.log10(df['y'].max()), 5)
ax.set_yticks(np.log(yticks))
ax.set_yticklabels([f'{y:.0e}' for y in yticks])

plt.show()

import numpy as np
import pandas as pd

# define the values for MPI_Bcast1 and MPI_Bcast2
mpi_bcast1_values = [76690.8, 1.15E+06, 2.31E+06, 4.02E+06, 1.34E+06, 7.42E+06, 1.87E+07, 3.49E+07, 168747,
                     8.14E+07, 1.24E+08, 1.44E+06, 1.74E+08, 2.52E+08, 3.97E+08, 4.54E+08, 5.09E+08, 5.25E+08,
                     6.14E+08, 6.71E+08, 7.88E+08, 9.77E+08, 8.88E+08, 9.99E+08, 1.01E+09]

mpi_bcast2_values = [183205, 7.41771E+06, 2.62942E+07, 8.66035E+07, 4.13063E+06, 2.18169E+07, 6.1933E+07, 1.05166E+08,
                     2.49918E+07, 1.11021E+08, 2.63816E+08, 5.81067E+07, 3.96275E+08, 4.40261E+08, 6.16035E+08,
                     7.76392E+08, 8.99395E+08, 1.0262E+09, 1.32307E+09, 1.40553E+09, 1.53706E+09, 1.58823E+09,
                     1.92105E+09, 1.66687E+09, 2.04953E+09]

# calculate the average of each row
averages = np.mean([mpi_bcast1_values, mpi_bcast2_values], axis=0)

# create a dataframe with the averages column
df = pd.DataFrame({'Averages': averages})

print(df)